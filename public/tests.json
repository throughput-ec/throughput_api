{
  "stats": {
    "suites": 16,
    "tests": 21,
    "passes": 13,
    "pending": 0,
    "failures": 8,
    "start": "2021-11-16T17:19:40.257Z",
    "end": "2021-11-16T17:19:48.227Z",
    "duration": 7970,
    "testsRegistered": 21,
    "passPercent": 61.904761904761905,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6bc611b9-3c54-4242-bd83-16fba7bdca79",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "63065d41-7966-4cc0-b624-f03b38e1372a",
          "parentUUID": "6bc611b9-3c54-4242-bd83-16fba7bdca79",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "50de9d38-abb4-488c-a3b1-424f508b3b0e",
          "title": "tests for /ccdr",
          "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/ccdr-test.js",
          "file": "/test/ccdr-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ba8dafec-487f-4bd0-b678-4e621d563064",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/ccdr-test.js",
              "file": "/test/ccdr-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"search results matching criteria\"",
                  "fullTitle": "tests for /ccdr tests for get should respond 200 for \"search results matching criteria\"",
                  "timedOut": false,
                  "duration": 99,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/ccdr', { \n    'qs': {\"name\":\"irure\",\"search\":\"dolore\",\"keyword\":\"ea dolor ad\",\"limit\":3,\"offset\":82027091},\n    'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "0c32f69a-1933-459d-8dc7-a48870e77449",
                  "parentUUID": "ba8dafec-487f-4bd0-b678-4e621d563064",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 400 for \"bad input parameter\"",
                  "fullTitle": "tests for /ccdr tests for get should respond 400 for \"bad input parameter\"",
                  "timedOut": false,
                  "duration": 17,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/ccdr', { \n    'qs': {\"name\":\"cillum Excepteur qui eiusmod anim\",\"search\":\"ut est commodo laboris consectetur\",\"keyword\":\"officia\",\"limit\":44,\"offset\":87750894},\n    'time': true\n});\nexpect(response).to.have.status(400);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 200 to equal 400",
                    "estack": "AssertionError: expected status code 200 to equal 400",
                    "diff": null
                  },
                  "uuid": "89ce96b5-af99-4a5d-9b9b-05358be84f15",
                  "parentUUID": "ba8dafec-487f-4bd0-b678-4e621d563064",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0c32f69a-1933-459d-8dc7-a48870e77449"
              ],
              "failures": [
                "89ce96b5-af99-4a5d-9b9b-05358be84f15"
              ],
              "pending": [],
              "skipped": [],
              "duration": 116,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "71c8196b-27d7-4141-b882-31866b59870e",
          "title": "repo_lister.vue and lister.vue calls:",
          "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/cookbook.js",
          "file": "/test/cookbook.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns a `citation` of length 1 when one Database ID is passed:",
              "fullTitle": "repo_lister.vue and lister.vue calls: Returns a `citation` of length 1 when one Database ID is passed:",
              "timedOut": false,
              "duration": 1245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let cite = await fetch('http://localhost:3000/api/citations?ids=r3d100010313', {method:'GET'});\nlet response =  await cite.json();\nexpect(response.data).to.contain.all.keys('citation');\nexpect(response.data.citation).to.have.lengthOf(1);",
              "err": {},
              "uuid": "76204396-3b3d-4599-84ca-e7c018e790e0",
              "parentUUID": "71c8196b-27d7-4141-b882-31866b59870e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns a `citation` of length n when a list of database IDs are passed:",
              "fullTitle": "repo_lister.vue and lister.vue calls: Returns a `citation` of length n when a list of database IDs are passed:",
              "timedOut": false,
              "duration": 554,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let cite = await fetch('http://localhost:3000/api/citations?ids=r3d100010313,r3d100010316,r3d100012277', {method:'GET'});\nlet response =  await cite.json();\nexpect(response.data).to.contain.all.keys('citation');\nexpect(response.data.citation).to.have.lengthOf(3);",
              "err": {},
              "uuid": "456fa8c9-4d16-4f52-af6a-8d558023a634",
              "parentUUID": "71c8196b-27d7-4141-b882-31866b59870e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns a `citation` of length 1 when a repo ID is passed:",
              "fullTitle": "repo_lister.vue and lister.vue calls: Returns a `citation` of length 1 when a repo ID is passed:",
              "timedOut": false,
              "duration": 500,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let cite = await fetch('http://localhost:3000/api/citations?ids=80521204,52386946,56258788', {method:'GET'});\nlet response =  await cite.json();\nexpect(response.data).to.contain.all.keys('citation');\nexpect(response.data.citation).to.have.lengthOf(3);",
              "err": {},
              "uuid": "09103480-dd91-4d12-9ae6-829996b02211",
              "parentUUID": "71c8196b-27d7-4141-b882-31866b59870e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "76204396-3b3d-4599-84ca-e7c018e790e0",
            "456fa8c9-4d16-4f52-af6a-8d558023a634",
            "09103480-dd91-4d12-9ae6-829996b02211"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2299,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6434209f-f0e5-4c9d-9522-e268871a0ce6",
          "title": "keyword_search.vue calls:",
          "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/cookbook.js",
          "file": "/test/cookbook.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Returns a list of all keywords associated with data catalogs:",
              "fullTitle": "keyword_search.vue calls: Returns a list of all keywords associated with data catalogs:",
              "timedOut": false,
              "duration": 1556,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let cite = await fetch('http://localhost:3000/api/ccdrs/keywords?limit=99999', {method:'GET'});\nlet response =  await cite.json();\nexpect(response.data).to.contain.all.keys('data');\nexpect(response.data.data).to.have.lengthOf.at.least(1);\nexpect(response.data.data[0]).to.contain.all.keys('keywords', 'count');",
              "err": {},
              "uuid": "33219566-b9f5-4208-9110-8021640de7e9",
              "parentUUID": "6434209f-f0e5-4c9d-9522-e268871a0ce6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns a data catalog when searched by name:",
              "fullTitle": "keyword_search.vue calls: Returns a data catalog when searched by name:",
              "timedOut": false,
              "duration": 2227,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let cite = await fetch('http://localhost:3000/api/ccdr?name=Neotoma', {method:'GET'});\nlet response =  await cite.json();\nexpect(response.data).to.contain.all.keys('data');\nexpect(response.data.data).to.have.lengthOf.at.least(1);\nexpect(response.data.data[0]).to.contain.all.keys('created', 'contact', 'name', 'description', 'id', 'url', 'count', 'keywords');",
              "err": {},
              "uuid": "caa6a897-81b7-42f6-a9c8-9e2850999e3a",
              "parentUUID": "6434209f-f0e5-4c9d-9522-e268871a0ce6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns code repositories associated with a database:",
              "fullTitle": "keyword_search.vue calls: Returns code repositories associated with a database:",
              "timedOut": false,
              "duration": 466,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nlet cite = await fetch('http://localhost:3000/api/ccdrs/repos?ccdrs=r3d100011291', {method:'GET'});\nlet response =  await cite.json();\nexpect(response.data).to.contain.all.keys('data');\nexpect(response.data.data).to.have.lengthOf.at.most(25);\nexpect(response.data.data[0]).to.contain.all.keys('created', 'name', 'description', 'id', 'url', 'ccdrs');",
              "err": {},
              "uuid": "742ad025-4d96-493b-bcf4-4387e8c98288",
              "parentUUID": "6434209f-f0e5-4c9d-9522-e268871a0ce6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns databases associated with particular keyword sets:",
              "fullTitle": "keyword_search.vue calls: Returns databases associated with particular keyword sets:",
              "timedOut": false,
              "duration": 1125,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nlet cite = await fetch('http://localhost:3000/api/keywords/ccdrs?keywords=climate,soil&limit=1000', {method:'GET'});\nlet response =  await cite.json();\nexpect(response.data).to.contain.all.keys('data');\nexpect(response.data.data).to.have.lengthOf.at.most(1000);\nexpect(response.data.data[0]).to.contain.all.keys('created', 'name', 'description', 'id', 'url', 'keywords');\nexpect(response.data.data[0].keywords).to.contain.any.members(['climate', 'soil']);",
              "err": {
                "message": "AssertionError: expected [ Array(3) ] to be a superset of [ 'climate', 'soil' ]",
                "estack": "AssertionError: expected [ Array(3) ] to be a superset of [ 'climate', 'soil' ]\n    at Context.<anonymous> (test/cookbook.js:64:59)\n    at processTicksAndRejections (internal/process/task_queues.js:95:5)",
                "diff": " [\n-   \"climate change\"\n   \"climate\"\n-   \"environmental science\"\n+   \"soil\"\n ]\n"
              },
              "uuid": "4d5726d0-e148-407f-903a-9ed460d87eae",
              "parentUUID": "6434209f-f0e5-4c9d-9522-e268871a0ce6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "33219566-b9f5-4208-9110-8021640de7e9",
            "caa6a897-81b7-42f6-a9c8-9e2850999e3a",
            "742ad025-4d96-493b-bcf4-4387e8c98288"
          ],
          "failures": [
            "4d5726d0-e148-407f-903a-9ed460d87eae"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5374,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "48635c41-f40d-48b8-ae80-ed5c2293c838",
          "title": "tests for /keyword/dbs/count",
          "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/keyword-dbs-count-test.js",
          "file": "/test/keyword-dbs-count-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "250ea928-02fa-473d-a4d7-c6fa114e99ed",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/keyword-dbs-count-test.js",
              "file": "/test/keyword-dbs-count-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"search results matching criteria\"",
                  "fullTitle": "tests for /keyword/dbs/count tests for get should respond 200 for \"search results matching criteria\"",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/keyword/dbs/count', { \n    'qs': {\"keyword\":\"in Lorem elit ad\"},\n    'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "90743f11-7bf6-435d-a1d5-0448b1277ea6",
                  "parentUUID": "250ea928-02fa-473d-a4d7-c6fa114e99ed",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 400 for \"bad input parameter\"",
                  "fullTitle": "tests for /keyword/dbs/count tests for get should respond 400 for \"bad input parameter\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/keyword/dbs/count', { \n    'qs': {\"keyword\":\"esse\"},\n    'time': true\n});\nexpect(response).to.have.status(400);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 200 to equal 400",
                    "estack": "AssertionError: expected status code 200 to equal 400",
                    "diff": null
                  },
                  "uuid": "cb38d545-0477-45b2-87b1-e65a464f30fe",
                  "parentUUID": "250ea928-02fa-473d-a4d7-c6fa114e99ed",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "90743f11-7bf6-435d-a1d5-0448b1277ea6"
              ],
              "failures": [
                "cb38d545-0477-45b2-87b1-e65a464f30fe"
              ],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f1f9c55e-ed8d-4f25-af21-edcee21b1c2f",
          "title": "tests for /keyword/repos",
          "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/keyword-repos-test.js",
          "file": "/test/keyword-repos-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "d426f4ed-6fc6-4e0b-85b6-f856adcd6742",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/keyword-repos-test.js",
              "file": "/test/keyword-repos-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"keywords matching the search criteria.\"",
                  "fullTitle": "tests for /keyword/repos tests for get should respond 200 for \"keywords matching the search criteria.\"",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/keyword/repos', { \n    'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "8b3ccfd1-baa5-4862-982f-4961fd90145a",
                  "parentUUID": "d426f4ed-6fc6-4e0b-85b6-f856adcd6742",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 400 for \"bad input parameter\"",
                  "fullTitle": "tests for /keyword/repos tests for get should respond 400 for \"bad input parameter\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/keyword/repos', { \n    'time': true\n});\nexpect(response).to.have.status(400);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 200 to equal 400",
                    "estack": "AssertionError: expected status code 200 to equal 400",
                    "diff": null
                  },
                  "uuid": "14d70db2-7031-480e-b78e-0a2c2a74b333",
                  "parentUUID": "d426f4ed-6fc6-4e0b-85b6-f856adcd6742",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b3ccfd1-baa5-4862-982f-4961fd90145a"
              ],
              "failures": [
                "14d70db2-7031-480e-b78e-0a2c2a74b333"
              ],
              "pending": [],
              "skipped": [],
              "duration": 31,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "f5e94702-148d-4856-bd9c-01a1929541da",
          "title": "tests for /keyword/resources",
          "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/keyword-resources-test.js",
          "file": "/test/keyword-resources-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "f265b80d-182f-4a9d-b7dd-c4275e149eb1",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/keyword-resources-test.js",
              "file": "/test/keyword-resources-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"search results matching criteria\"",
                  "fullTitle": "tests for /keyword/resources tests for get should respond 200 for \"search results matching criteria\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/keyword/resources', { \n    'qs': {\"keyword\":\"Ut officia\",\"limit\":9,\"offset\":98596720},\n    'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "b664da2d-a914-4810-960d-83ad944b596e",
                  "parentUUID": "f265b80d-182f-4a9d-b7dd-c4275e149eb1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 400 for \"bad input parameter\"",
                  "fullTitle": "tests for /keyword/resources tests for get should respond 400 for \"bad input parameter\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/keyword/resources', { \n    'qs': {\"keyword\":\"commodo\",\"limit\":1,\"offset\":87847551},\n    'time': true\n});\nexpect(response).to.have.status(400);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 200 to equal 400",
                    "estack": "AssertionError: expected status code 200 to equal 400",
                    "diff": null
                  },
                  "uuid": "0a0ace7e-aab0-4c4a-b914-5f9f3147bfdf",
                  "parentUUID": "f265b80d-182f-4a9d-b7dd-c4275e149eb1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b664da2d-a914-4810-960d-83ad944b596e"
              ],
              "failures": [
                "0a0ace7e-aab0-4c4a-b914-5f9f3147bfdf"
              ],
              "pending": [],
              "skipped": [],
              "duration": 26,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "33756317-281d-45ed-90a2-6ff7544fdf0c",
          "title": "tests for /keywords",
          "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/keywords-test.js",
          "file": "/test/keywords-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "0b40d7d9-5e0d-4de5-8457-568365c058c4",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/keywords-test.js",
              "file": "/test/keywords-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"keywords matching the search criteria.\"",
                  "fullTitle": "tests for /keywords tests for get should respond 200 for \"keywords matching the search criteria.\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/keywords', { \n    'qs': {\"keyword\":\"elit\",\"limit\":43,\"offset\":53086281},\n    'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "546d4836-8d5f-4a18-862a-eadfb08b2865",
                  "parentUUID": "0b40d7d9-5e0d-4de5-8457-568365c058c4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 400 for \"bad input parameter\"",
                  "fullTitle": "tests for /keywords tests for get should respond 400 for \"bad input parameter\"",
                  "timedOut": false,
                  "duration": 12,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/keywords', { \n    'qs': {\"keyword\":\"ullamco\",\"limit\":13,\"offset\":48272157},\n    'time': true\n});\nexpect(response).to.have.status(400);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 200 to equal 400",
                    "estack": "AssertionError: expected status code 200 to equal 400",
                    "diff": null
                  },
                  "uuid": "5da5ee35-618f-49f2-8983-17e41d299ac0",
                  "parentUUID": "0b40d7d9-5e0d-4de5-8457-568365c058c4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "546d4836-8d5f-4a18-862a-eadfb08b2865"
              ],
              "failures": [
                "5da5ee35-618f-49f2-8983-17e41d299ac0"
              ],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "fbbc2e06-08d4-44a1-8606-2052fb4bc6af",
          "title": "tests for /metrics/annos",
          "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/metrics-annos-test.js",
          "file": "/test/metrics-annos-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "feb502fe-3f8b-42b2-b734-1a284e4a00ae",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/metrics-annos-test.js",
              "file": "/test/metrics-annos-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"Summary of weekly uploads/updates.\"",
                  "fullTitle": "tests for /metrics/annos tests for get should respond 200 for \"Summary of weekly uploads/updates.\"",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/metrics/annos', { \n    'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "ef1321fa-c6c6-47ab-8e12-329c3bce19ff",
                  "parentUUID": "feb502fe-3f8b-42b2-b734-1a284e4a00ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 400 for \"bad input parameter\"",
                  "fullTitle": "tests for /metrics/annos tests for get should respond 400 for \"bad input parameter\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/metrics/annos', { \n    'time': true\n});\nexpect(response).to.have.status(400);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 200 to equal 400",
                    "estack": "AssertionError: expected status code 200 to equal 400",
                    "diff": null
                  },
                  "uuid": "4c5405af-c0cb-419c-8ac5-6a563d767e2b",
                  "parentUUID": "feb502fe-3f8b-42b2-b734-1a284e4a00ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ef1321fa-c6c6-47ab-8e12-329c3bce19ff"
              ],
              "failures": [
                "4c5405af-c0cb-419c-8ac5-6a563d767e2b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 24,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        },
        {
          "uuid": "5cf0b8ca-25c6-42bc-b4b8-75afe31347b3",
          "title": "tests for /repo",
          "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/repo-test.js",
          "file": "/test/repo-test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "68269255-b9f4-4332-afb6-dae735813d5f",
              "title": "tests for get",
              "fullFile": "/home/simon/Documents/Throughput/throughput_api/test/repo-test.js",
              "file": "/test/repo-test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should respond 200 for \"search results matching criteria\"",
                  "fullTitle": "tests for /repo tests for get should respond 200 for \"search results matching criteria\"",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/repo', { \n    'qs': {\"name\":\"dolore\",\"search\":\"sed\",\"keyword\":\"quis Duis do\",\"limit\":34,\"offset\":80261704},\n    'time': true\n});\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
                  "err": {},
                  "uuid": "71f5a277-ef92-4cb7-ac15-1c74b02f854a",
                  "parentUUID": "68269255-b9f4-4332-afb6-dae735813d5f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should respond 400 for \"bad input parameter\"",
                  "fullTitle": "tests for /repo tests for get should respond 400 for \"bad input parameter\"",
                  "timedOut": false,
                  "duration": 11,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "var response = request('get', 'http://localhost:3000/repo', { \n    'qs': {\"name\":\"laborum in nulla quis dolor\",\"search\":\"ut irure ea qui\",\"keyword\":\"officia adipisicing dolore reprehenderit\",\"limit\":49,\"offset\":26385121},\n    'time': true\n});\nexpect(response).to.have.status(400);\nreturn chakram.wait();",
                  "err": {
                    "message": "AssertionError: expected status code 200 to equal 400",
                    "estack": "AssertionError: expected status code 200 to equal 400",
                    "diff": null
                  },
                  "uuid": "c8390a70-a02a-4a58-a3d3-21a6149fae52",
                  "parentUUID": "68269255-b9f4-4332-afb6-dae735813d5f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "71f5a277-ef92-4cb7-ac15-1c74b02f854a"
              ],
              "failures": [
                "c8390a70-a02a-4a58-a3d3-21a6149fae52"
              ],
              "pending": [],
              "skipped": [],
              "duration": 25,
              "root": false,
              "rootEmpty": false,
              "_timeout": 30000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 30000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 30000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.0.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "tests",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": {
        "reportDir": "public",
        "reportFilename": "tests"
      },
      "version": "5.2.0"
    }
  }
}